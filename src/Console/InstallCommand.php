<?php


namespace CabinetOffice\LaravelBreezeGovukFrontend\Console;

use Illuminate\Console\Command;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Log;

class InstallCommand extends Command
{

    /**
     * Can we ignore error generated by Laravel Breeze
     * @var bool
     */
    private $ignoreBreezeError = false;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'breeze:install-govuk {--ignoreBreezeError=false}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Install the GOV.UK Frontend';

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle(): void
    {
        $this->ignoreBreezeError = ($this->option('ignoreBreezeError') ?? null) === 'true';

        $this->updateNodePackages(function ($packages) {

            return [
                    'govuk-frontend' => '^3.14.0',
                    "cross-env" => "^7.0",
                    "laravel-mix" => "^5.0.9",
                    "resolve-url-loader" => "^2.3.1",
                    "sass" => "^1.20.1",
                    "sass-loader" => "^8.0.0",
                    "vue" => "^2.5.17",
                    "vue-template-compiler" => "^2.6.10",
                ] + Arr::except($packages, [
                    '@tailwindcss/ui',
                    'alpinejs',
                    'popper.js',
                    'lodash',
                    'jquery',
                    'postcss-import'
                ]);
        });

        try {
            $this->installBreeze();
        } catch (\Exception $exception) {
            throw_if(!$this->ignoreBreezeError, $exception);
            $this->info('There was an error generated by Laravel Breeze install. See logs for more details.');
            Log::error("CabinetOffice\LaravelBreezeGovukFrontend\InstallCommand:" . $exception->getMessage());
        }

        // Start installing the GOV.UK Frontend
        $this->directorySetupAndClean();
        $this->updateLayoutAndPages();
        $this->updateStyles();
        $this->updateScripts();
        $this->updateHtml5Shiv();
        $this->updateMix();
        $this->removeViewComponentClass();
        $this->removeTailwindConfigJs();
        $this->flushNodeModules();

        $this->info('GOV.UK Frontend for Laravel Breeze scaffolding installed.');
        $this->comment('Please execute the "npm install && npm run dev" command to build your assets.');
    }

    /**
     * Install Laravel Breeze
     */
    public function installBreeze(): void
    {
        $this->directorySetupAndClean(); // clean first time for Breeze install
        Artisan::call('breeze:install');
    }

    /**
     * Ensure the directory needed exists and clean them up
     */
    private function directorySetupAndClean()
    {
        $fileSystem = new Filesystem();
        $fileSystem->ensureDirectoryExists(resource_path('sass'));
        $fileSystem->ensureDirectoryExists(resource_path('js'));
        $fileSystem->ensureDirectoryExists(resource_path('views'));
        $fileSystem->ensureDirectoryExists(resource_path('css'));

        $fileSystem->cleanDirectory(resource_path('css'));
        $fileSystem->cleanDirectory(resource_path('sass'));
        $fileSystem->cleanDirectory(resource_path('views'));
        $fileSystem->cleanDirectory(resource_path('js'));
        $fileSystem->cleanDirectory(app_path('View/Components'));
    }

    /**
     * Copy over SCSS directory
     */
    public function updateStyles(): void
    {
        $fileSystem = new Filesystem();
        $fileSystem->copyDirectory(__DIR__ . '/../../stubs/resources/sass', resource_path('sass'));
    }

    /**
     * Copy over JS directory
     */
    public function updateScripts(): void
    {
        $fileSystem = new Filesystem();
        $fileSystem->copyDirectory(__DIR__ . '/../../stubs/resources/js', resource_path('js'));
    }

    /**
     * Copy over the HTML Shivs used by GOV.UK Frontend
     */
    public function updateHtml5Shiv(): void
    {
        $fileSystem = new Filesystem();
        $fileSystem->ensureDirectoryExists(resource_path('js/html5shiv'));
        copy(__DIR__ . '/../../vendors/html5shiv/dist/html5shiv.min.js', resource_path('js/html5shiv/html5shiv.min.js'));
        copy(__DIR__ . '/../../vendors/html5shiv/dist/html5shiv-printshiv.min.js', resource_path('js/html5shiv/html5shiv-printshiv.min.js'));
    }

    /**
     * Copy over the views elements - layouts, components, partials, views
     */
    public function updateLayoutAndPages(): void
    {

        $fileSystem = new Filesystem();
        $fileSystem->copyDirectory(__DIR__ . '/../../stubs/resources/views/auth', resource_path('views/auth'));
        $fileSystem->copyDirectory(__DIR__ . '/../../stubs/resources/views/layouts', resource_path('views/layouts'));
        $fileSystem->copyDirectory(__DIR__ . '/../../stubs/resources/views/components', resource_path('views/components'));
        $fileSystem->copyDirectory(__DIR__ . '/../../stubs/resources/views/partials', resource_path('views/partials'));

        $fileSystem->delete(resource_path('views/dashboard.blade.php'));
        $fileSystem->delete(resource_path('views/welcome.blade.php'));

        copy(__DIR__ . '/../../stubs/resources/views/dashboard.blade.php', resource_path('views/dashboard.blade.php'));
        copy(__DIR__ . '/../../stubs/resources/views/welcome.blade.php', resource_path('views/welcome.blade.php'));
    }

    /**
     * Copy over the custom mix files
     */
    public function updateMix(): void
    {
        copy(__DIR__ . '/../../stubs/webpack.mix.js', base_path('webpack.mix.js'));
    }

    /**
     * Remove the View Component classes generated by Breeze
     */
    public function removeViewComponentClass(): void
    {
        $fileSystem = new Filesystem();
        $fileSystem->cleanDirectory(app_path('View/Components'));
    }

    /**
     * Update the "package.json" file.
     *
     * @param callable $callback
     * @param bool $dev
     * @return void
     */
    protected function updateNodePackages(callable $callback, $dev = true): void
    {
        if (!file_exists(base_path('package.json'))) {
            return;
        }

        $configurationKey = $dev ? 'devDependencies' : 'dependencies';

        $packages = json_decode(file_get_contents(base_path('package.json')), true);

        $packages[$configurationKey] = $callback(
            array_key_exists($configurationKey, $packages) ? $packages[$configurationKey] : [],
            $configurationKey
        );

        ksort($packages[$configurationKey]);

        file_put_contents(
            base_path('package.json'),
            json_encode($packages, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT) . PHP_EOL, LOCK_EX
        );
    }

    /**
     * Delete the "node_modules" directory and remove the associated lock files.
     *
     * @return void
     */
    protected function flushNodeModules(): void
    {
        tap(new Filesystem, function ($files) {
            $files->deleteDirectory(base_path('node_modules'));

            $files->delete(base_path('yarn.lock'));
            $files->delete(base_path('package-lock.json'));
        });
    }

    /**
     * Remove Tailwind Config JS
     */
    protected function removeTailwindConfigJs()
    {
        $fileSystem = new Filesystem();
        $fileSystem->delete(base_path('tailwind.config.js'));
    }
}
